{"version":3,"sources":["webpack:///./src/components/Posts/Posts.js","webpack:///./src/pages/index.js"],"names":["Posts","posts","id","className","map","index","node","title","frontmatter","fields","slug","key","to","src","cover","childImageSharp","fluid","alt","category","Date","date","toLocaleDateString","BlogIndex","data","location","siteTitle","site","siteMetadata","useState","allMarkdownRemark","edges","setPosts","skip","setSkip","more","setMore","handleShowMore","a","fetch","origin","method","headers","body","JSON","stringify","query","newPosts","json","length","Layout","page","SEO","author","summary","Button","variant","onClick","pageQuery"],"mappings":"oUAgDeA,EA7CD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKC,GAAG,WACN,yBAAKC,UAAU,aACb,yBAAKA,UAAU,gBACZF,EAAMG,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KACNC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,yBAAKP,UAAU,oBAAoBQ,IAAG,QAAUN,GAC9C,kBAAC,OAAD,CAAMO,GAAIN,EAAKG,OAAOC,KAAMP,UAAU,eACpC,yBACEU,IACEP,EAAKE,YAAYM,OAASR,EAAKE,YAC5BM,MAAMC,gBAAgBC,MAAMH,IAEjCI,IAAKV,KAGT,yBAAKJ,UAAU,iBACb,wBAAIA,UAAU,0BACXG,EAAKE,YAAYU,UAEpB,kBAAC,OAAD,CAAMN,GAAIN,EAAKG,OAAOC,KAAMP,UAAU,uBACnCI,GAEH,yBAAKJ,UAAU,sBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,iBACb,2BACG,IAAIgB,KAAKb,EAAKE,YAAYY,MAAMC,mBAC/B,qB,+2BCkDXC,UA5EG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKG,KAAKC,aAAapB,MADD,EAEdqB,mBAASL,EAAKM,kBAAkBC,OAAnD7B,EAFiC,KAE1B8B,EAF0B,OAGhBH,mBAAS,IAA1BI,EAHiC,KAG3BC,EAH2B,OAIhBL,oBAAS,GAA1BM,EAJiC,KAI3BC,EAJ2B,KAMlCC,EAAc,e,EAAA,G,EAAA,UAAG,4BAAAC,EAAA,sEACAC,MAASd,EAASe,OAAb,cAAkC,CAC1DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,MAAM,+SAYMb,EAZP,inBALY,cACjBc,EADiB,gBA8CJA,EAASC,OA9CL,OA8CrBD,EA9CqB,OAgDrBb,EAAQD,EAAO,IACfD,EAAS,GAAD,SAAK9B,GAAL,EAAe6C,EAASvB,KAAKM,kBAAkBC,SACnDgB,EAASvB,KAAKM,kBAAkBC,MAAMkB,OAAS,IACjDb,GAAQ,GAnDW,0C,+KAAH,qDAuDpB,OACE,kBAACc,EAAA,EAAD,CAAQzB,SAAUA,EAAUjB,MAAOkB,EAAWyB,KAAK,YACjD,kBAACC,EAAA,EAAD,CAAK5C,MAAOgB,EAAKG,KAAKC,aAAayB,OAAOC,UAC1C,kBAAC,EAAD,CAAOpD,MAAOA,IACbiC,GACC,yBAAK/B,UAAU,YACb,kBAACmD,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASpB,GAArC,kBAnEV,IA8EaqB,EAAS","file":"component---src-pages-index-js-69071b0b2f578f6d99ac.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Posts = ({ posts }) => {\n  return (\n    <div id=\"content\">\n      <div className=\"container\">\n        <div className=\"blog-masonry\">\n          {posts.map(({ node }, index) => {\n            const title = node.frontmatter.title || node.fields.slug\n            return (\n              <div className=\"post-card -center\" key={`post-${index}`}>\n                <Link to={node.fields.slug} className=\"card__cover\">\n                  <img\n                    src={\n                      node.frontmatter.cover && node.frontmatter\n                        .cover.childImageSharp.fluid.src\n                    }\n                    alt={title}\n                  />\n                </Link>\n                <div className=\"card__content\">\n                  <h5 className=\"card__content-category\">\n                    {node.frontmatter.category}\n                  </h5>\n                  <Link to={node.fields.slug} className=\"card__content-title\">\n                    {title}\n                  </Link>\n                  <div className=\"card__content-info\">\n                    <div className=\"info__time\">\n                      <i className=\"far fa-clock\"></i>\n                      <p>\n                        {new Date(node.frontmatter.date).toLocaleDateString(\n                          \"fa-IR\"\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Posts","import React, { useState } from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout/Layout'\nimport SEO from '../components/SEO/SEO'\nimport Posts from '../components/Posts/Posts'\nimport { Button } from 'react-bootstrap'\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const [posts, setPosts] = useState(data.allMarkdownRemark.edges)\n  const [skip, setSkip] = useState(12)\n  const [more, setMore] = useState(true)\n\n  const handleShowMore = async () => {\n    let newPosts = await fetch(`${location.origin}/___graphql`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        query: `{\n          site {\n            siteMetadata {\n              title\n              author {\n                summary\n              }\n            }\n          }\n          allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            limit: 12\n            skip: ${skip}\n          ) {\n            edges {\n              node {\n                excerpt\n                fields {\n                  slug\n                }\n                frontmatter {\n                  date(formatString: \"MMMM DD, YYYY\")\n                  title\n                  description\n                  cover {\n                    childImageSharp {\n                      id\n                      fluid {\n                        src\n                      }\n                    }\n                  }\n                  category\n                }\n              }\n            }\n          }\n        }`,\n      }),\n    })\n\n    newPosts = await newPosts.json()\n\n    setSkip(skip + 12)\n    setPosts([...posts, ...newPosts.data.allMarkdownRemark.edges])\n    if (newPosts.data.allMarkdownRemark.edges.length < 12) {\n      setMore(false)\n    }\n  }\n\n  return (\n    <Layout location={location} title={siteTitle} page=\"homepage\">\n      <SEO title={data.site.siteMetadata.author.summary} />\n      <Posts posts={posts} />\n      {more && (\n        <div className=\"loadMore\">\n          <Button variant=\"secondary\" onClick={handleShowMore}>\n            مطالب بیشتر\n          </Button>\n        </div>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author {\n          summary\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 12\n      skip: 0\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}