{"version":3,"sources":["webpack:///./src/components/Posts/Posts.js","webpack:///./src/pages/index.js"],"names":["Posts","posts","id","className","map","index","node","title","frontmatter","fields","slug","key","to","src","cover","childImageSharp","fluid","alt","category","Date","date","toLocaleDateString","pageQuery","BlogIndex","data","location","siteTitle","site","siteMetadata","allMarkdownRemark","edges","page","author","summary"],"mappings":"yMAgDeA,EA7CD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKC,GAAG,WACN,yBAAKC,UAAU,aACb,yBAAKA,UAAU,gBACZF,EAAMG,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KACNC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,yBAAKP,UAAU,oBAAoBQ,IAAG,QAAUN,GAC9C,kBAAC,OAAD,CAAMO,GAAIN,EAAKG,OAAOC,KAAMP,UAAU,eACpC,yBACEU,IACEP,EAAKE,YAAYM,OAASR,EAAKE,YAC5BM,MAAMC,gBAAgBC,MAAMH,IAEjCI,IAAKV,KAGT,yBAAKJ,UAAU,iBACb,wBAAIA,UAAU,0BACXG,EAAKE,YAAYU,UAEpB,kBAAC,OAAD,CAAMN,GAAIN,EAAKG,OAAOC,KAAMP,UAAU,uBACnCI,GAEH,yBAAKJ,UAAU,sBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,iBACb,2BACG,IAAIgB,KAAKb,EAAKE,YAAYY,MAAMC,mBAC/B,qBCbbC,GAFEC,UAZG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKG,KAAKC,aAAarB,MACnCN,EAAQuB,EAAKK,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUlB,MAAOmB,EAAWK,KAAK,YACjD,kBAAC,IAAD,CAAKxB,MAAOiB,EAAKG,KAAKC,aAAaI,OAAOC,UAC1C,kBAAC,EAAD,CAAOhC,MAAOA,MAOE","file":"component---src-pages-index-js-14cf341c185db6a33da9.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Posts = ({ posts }) => {\n  return (\n    <div id=\"content\">\n      <div className=\"container\">\n        <div className=\"blog-masonry\">\n          {posts.map(({ node }, index) => {\n            const title = node.frontmatter.title || node.fields.slug\n            return (\n              <div className=\"post-card -center\" key={`post-${index}`}>\n                <Link to={node.fields.slug} className=\"card__cover\">\n                  <img\n                    src={\n                      node.frontmatter.cover && node.frontmatter\n                        .cover.childImageSharp.fluid.src\n                    }\n                    alt={title}\n                  />\n                </Link>\n                <div className=\"card__content\">\n                  <h5 className=\"card__content-category\">\n                    {node.frontmatter.category}\n                  </h5>\n                  <Link to={node.fields.slug} className=\"card__content-title\">\n                    {title}\n                  </Link>\n                  <div className=\"card__content-info\">\n                    <div className=\"info__time\">\n                      <i className=\"far fa-clock\"></i>\n                      <p>\n                        {new Date(node.frontmatter.date).toLocaleDateString(\n                          \"fa-IR\"\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Posts","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Posts from \"../components/Posts/Posts\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle} page=\"homepage\">\n      <SEO title={data.site.siteMetadata.author.summary} />\n      <Posts posts={posts} />      \n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title,\n        author {\n          summary\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description,\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            },\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}